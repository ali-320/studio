/**
 * @fileoverview Firestore Security Rules for the Flood App Prototype.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection. It enforces a strict user-ownership model for user profiles and requires authentication for creating or modifying alerts, volunteer applications, and incident reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the authenticated user with a matching UID.
 * - /alerts/{alertId}: Stores flood alerts. Publicly readable, but write access is restricted to authenticated users.
 * - /volunteerApplications/{applicationId}: Stores volunteer applications. Write access is restricted to authenticated users.
 * - /incidentReports/{reportId}: Stores incident reports. Write access is restricted to authenticated users.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Alerts are publicly readable to maximize information dissemination during emergencies, but write access is restricted.
 *
 * Denormalization for Authorization:
 * - To secure `/alerts/{alertId}`, consider adding an `authorId` field to the Alert entity and storing the user's UID when the alert is created.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the authenticated user can access their own data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create /users/user_abc
     * @allow (get, list, update, delete) - User with UID 'user_abc' can access their own profile at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create /users/user_abc.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot access /users/user_abc.
     * @principle Enforces document ownership for all operations.  Validates relational integrity on create.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages flood alerts, allowing public read access but restricting write access to authenticated users.
     * @path /alerts/{alertId}
     * @allow (get, list) - Any user (or unauthenticated user) can read any alert.
     * @allow (create) - An authenticated user can create an alert.
     * @deny (create, update, delete) - Unauthenticated users cannot create/update/delete alerts.
     * @deny (update, delete) - Non-owners cannot modify alerts.
     * @principle Provides public read access while controlling write access via authentication.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Handles volunteer applications, restricting access to authenticated users.
     * @path /volunteerApplications/{applicationId}
     * @allow (create) - Authenticated user can create a volunteer application.
     * @deny (get, list, update, delete) - Only authenticated users can create applications. Other operations are denied.
     * @principle Requires authentication for all operations.
     */
    match /volunteerApplications/{applicationId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages incident reports, restricting access to authenticated users.
     * @path /incidentReports/{reportId}
     * @allow (create) - Authenticated user can create an incident report.
     * @deny (get, list, update, delete) - Only authenticated users can create reports. Other operations are denied.
     * @principle Requires authentication for all operations.
     */
    match /incidentReports/{reportId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}