/**
 * @fileoverview Firestore Security Rules for Flood Relief Application
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection by enforcing strict ownership for user-related data.
 * Public read access is granted to specific collections like 'news' for general information dissemination.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, secured with owner-only access.
 * - /users/{userId}/savedLocations/{locationId}: User-specific saved locations, accessible only by the owner.
 * - /alerts/{alertId}: Stores flood alerts, with open read access but restricted writes.
 * - /volunteerApplications/{applicationId}: Applications to become volunteers, managed with create permissions open to authenticated users, and update/delete permissions denied.
 * - /incidentReports/{reportId}: Incident reports created by volunteers, with restricted write access.
 * - /volunteerChats/{chatId}: Chat messages for volunteers, open to authenticated users.
 * - /news/{locationId}: Cached news articles, publicly readable but write-protected.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - 'news' collection offers public read access for widespread information.
 * - Ambiguous relationships default to strict owner-only access.
 *
 * Denormalization for Authorization:
 * - The rules rely on `request.auth.uid` for identity verification and `userId` in paths or documents for ownership checks, avoiding additional reads.
 *
 * Structural Segregation:
 * - User-specific data resides under /users/{userId} to maintain privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Core authentication check.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID and the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-ownership and resource existence for destructive operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their profile if authenticated as 'abc'.
     * @allow (get, list) - User 'abc' can read their profile if authenticated as 'abc'.
     * @allow (update, delete) - User 'abc' can update/delete their profile if authenticated as 'abc' and the profile exists.
     * @deny (create) - User 'def' cannot create a profile for 'abc'.
     * @deny (update, delete) - User 'def' cannot update/delete profile 'abc'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users for privacy.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for saved locations of a user.
     * @path /users/{userId}/savedLocations/{locationId}
     * @allow (create) - User 'abc' can create a saved location under their profile.
     * @allow (get, list) - User 'abc' can read their saved locations.
     * @allow (update, delete) - User 'abc' can update/delete their saved locations if the location exists.
     * @deny (create) - User 'def' cannot create a saved location for user 'abc'.
     * @deny (update, delete) - User 'def' cannot update/delete saved location for user 'abc'.
     * @principle Enforces document ownership for saved locations.
     */
    match /users/{userId}/savedLocations/{locationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for flood alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) - Any user can read the alerts.
     * @deny (create, update, delete) - Only backend services can create, update, or delete alerts.
     * @principle Allows public read access to flood alerts, restricts writes.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for volunteer applications.
     * @path /volunteerApplications/{applicationId}
     * @allow (create) - Any signed-in user can create an application.
     * @deny (get, list, update, delete) - No user can get, list, update, or delete volunteer applications.
     * @principle Allows any authenticated user to apply, restricts management.
     */
    match /volunteerApplications/{applicationId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }

    /**
     * @description Rules for incident reports.
     * @path /incidentReports/{reportId}
     * @deny (create, get, list, update, delete) - Only backend services can manage incident reports.
     * @principle Restricts all access to incident reports.
     */
    match /incidentReports/{reportId} {
      allow create, get, list, update, delete: if false;
    }

    /**
     * @description Rules for volunteer chat messages.
     * @path /volunteerChats/{chatId}
     * @allow (create) - Any signed-in user can create a chat message.
     * @allow (get, list) - Any signed-in user can read chat messages.
     * @deny (update, delete) - No user can update or delete chat messages.
     * @principle Allows open communication between volunteers.
     */
    match /volunteerChats/{chatId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for cached news articles.
     * @path /news/{locationId}
     * @allow (get, list) - Any user can read cached news articles.
     * @deny (create, update, delete) - Only backend services can update the news cache.
     * @principle Allows public read access to news, restricts writes.
     */
    match /news/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}