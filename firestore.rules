/**
 * @fileoverview Firestore Security Rules for Flood Monitoring App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and saved locations.
 * Alerts and volunteer chats are publicly readable but writable only under specific conditions.
 * Volunteer applications and incident reports have more restrictive access, typically limited to admin or the associated user.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user themselves.
 * - /users/{userId}/savedLocations/{locationId}: Saved locations for a specific user, accessible only by that user.
 * - /alerts/{alertId}: Flood alerts, publicly readable but with restricted write access.
 * - /volunteerApplications/{applicationId}: Volunteer applications, restricted access.
 * - /incidentReports/{reportId}: Incident reports, restricted access.
 * - /volunteerChats/{chatId}: Volunteer chat messages, publicly readable but with restricted write access.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only manage their own saved locations.
 * - Alerts are publicly readable, but creation and modification are restricted.
 * - Listing all users is disallowed.
 * - Write operations on `/alerts` are only allowed for authorized users (no roles defined, defaulting to no one).
 *
 * Denormalization for Authorization:
 *  - The rules do not currently denormalize any data.  If roles become necessary, consider adding a `members` map to the relevant documents (e.g., `/alerts/{alertId}`) to avoid costly `get()` calls.
 *
 * Structural Segregation:
 *  - No explicit structural segregation is used. Drafts vs. published content is not addressed in the current data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create, update, get, delete) if the user is the owner of the profile.
     * @deny (create, update, get, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to saved locations for a user.
     * @path /users/{userId}/savedLocations/{locationId}
     * @allow (create, update, get, delete) if the user is the owner of the parent profile.
     * @deny (create, update, get, delete) if the user is not the owner of the parent profile.
     * @principle Enforces document ownership, restricts access to a user's own data.
     */
    match /users/{userId}/savedLocations/{locationId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to flood alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) to everyone.
     * @allow (create, update, delete) to nobody.
     * @principle Allows public read access but restricts write access.
     */
    match /alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to volunteer applications.
     * @path /volunteerApplications/{applicationId}
     * @allow (get, list) to admins only.
     * @allow (create) to authenticated users, ensuring userId matches auth.uid.
     * @allow (update, delete) to nobody
     * @principle Restricts access to volunteer applications.
     */
    match /volunteerApplications/{applicationId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false; // TODO: Add Admin Role for VolunteerApplication GET
      allow list: if false; // TODO: Add Admin Role for VolunteerApplication LIST
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to incident reports.
     * @path /incidentReports/{reportId}
     * @allow (get, list, create, update, delete) to nobody.
     * @principle Restricts access to incident reports.
     */
    match /incidentReports/{reportId} {
      allow get: if false; // TODO: Add Volunteer Role for Incident Report GET
      allow list: if false; // TODO: Add Volunteer Role for Incident Report LIST
      allow create: if false; // TODO: Add Volunteer Role for Incident Report CREATE
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to volunteer chat messages.
     * @path /volunteerChats/{chatId}
     * @allow (get, list) to everyone.
     * @allow (create) if the user is signed in
     * @allow (update, delete) to nobody
     * @principle Allows public read access but restricts write access.
     */
    match /volunteerChats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}