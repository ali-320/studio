/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-owned data and public read access to alerts.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /alerts/{alertId}: Stores flood alerts, publicly readable, writable only by authorized users (TODO).
 * - /volunteerApplications/{applicationId}: Stores volunteer applications, writable only by the applying user, and readable only by authorized users (TODO).
 * - /incidentReports/{reportId}: Stores incident reports, writable only by authorized users (TODO).
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Alerts are publicly readable but restricted for modification (TODO: implement role-based write access).
 * - Volunteer applications are restricted to self-submission and admin review (TODO: implement role-based access).
 * - Listing of users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - The rules rely on the `request.auth.uid` to match the `userId` in the path `/users/{userId}`.
 * - The rules do not require denormalization for the other collections in the current version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can only access their own profile data.
     * @deny (create) If the userId does not match their auth UID.
     * @deny (list) Listing users is not allowed.
     * @deny (update, delete) If the user attempts to modify another user's profile.
     * @principle Enforces document ownership for user profiles and prevents unauthorized access.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own profile.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to get their own profile.
      allow get: if isOwner(userId);

      // Allow the user to update their own profile.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId);

      // Prevent listing of all users.
      allow list: if false;
    }

    /**
     * @description Controls access to flood alert data.
     * @path /alerts/{alertId}
     * @allow (get, list) All users can read alert data.
     * @deny (create, update, delete) Only authorized users can create, update, or delete alerts (TODO: Implement role-based write access).
     * @principle Allows public read access to alerts while restricting write access.
     */
    match /alerts/{alertId} {
      // Allow anyone to read alerts.
      allow get, list: if true;

      // Only authorized users can create, update, or delete alerts.
      // TODO: Implement role-based access control for write operations.
      allow create, update, delete: if false; // TODO: Add role validation for alert modification.
    }

    /**
     * @description Controls access to volunteer applications.
     * @path /volunteerApplications/{applicationId}
     * @allow (create) Authenticated users can create their own volunteer application.
     * @deny (get, list, update, delete) Access to volunteer applications is restricted (TODO: Implement role-based access).
     * @principle Allows users to submit volunteer applications but restricts access to them (TODO: Implement role-based access for review).
     */
    match /volunteerApplications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      // Allow users to create their own volunteer application.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // Access to volunteer applications is restricted.
      // TODO: Implement role-based access control for administrators.
      allow get, list, update, delete: if false; // TODO: Add role validation for application review.
    }

    /**
     * @description Controls access to incident reports.
     * @path /incidentReports/{reportId}
     * @deny (get, list, create, update, delete) Access to incident reports is restricted (TODO: Implement role-based access).
     * @principle Restricts access to incident reports (TODO: Implement role-based access).
     */
    match /incidentReports/{reportId} {
      // Access to incident reports is restricted.
      // TODO: Implement role-based access control for authorized personnel.
      allow get, list, create, update, delete: if false; // TODO: Add role validation for report management.
    }
  }
}