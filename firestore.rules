/**
 * @description This ruleset enforces a strict user-ownership model for user profiles,
 *              allows public read access to alerts, and restricts volunteer application
 *              management to authorized users.
 * @dataStructure
 *  - /users/{userId}: Stores user profile data. Access is restricted to the owning user.
 *  - /alerts/{alertId}: Stores flood alert data. Read access is public, but creation,
 *                         updating, and deletion are restricted.
 *  - /volunteerApplications/{applicationId}: Stores volunteer applications. Creation is
 *      restricted to authenticated users, and modification is only allowed by admins.
 *  - /incidentReports/{reportId}: Stores detailed incident reports from volunteers.
 *       Creation is restricted to authenticated users, and modification is only allowed by admins.
 * @keySecurityDecisions
 *  - Users can only read/write their own profile data.
 *  - Alerts are publicly readable but can only be created/modified/deleted by authorized users.
 *  - Listing of users and volunteer applications is denied to all clients.
 *  - An unowned incidentReports collection is write protected using dummy rule placeholders
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (update) Signed-in user can update their own profile.
     * @allow (get) Signed-in user can read their own profile.
     * @deny (create) Signed-in user cannot create a profile for another user.
     * @deny (update) Signed-in user cannot update another user's profile.
     * @deny (delete) No one can delete a user profile.
     * @deny (list) No one can list user profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if false;
    }

    /**
     * @description Controls access to alert documents.
     * @path /alerts/{alertId}
     * @allow (get, list) Anyone can read alerts.
     * @deny (create, update, delete) No one can create, update, or delete alerts.
     * @principle Public read access with restricted writes.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to volunteer application documents.
     * @path /volunteerApplications/{applicationId}
     * @allow (create) Signed-in user can create a volunteer application.
     * @deny (get, list, update, delete) Only admins can perform these actions.
     * @principle Restricts volunteer application management.
     */
    match /volunteerApplications/{applicationId} {
      allow get: if false;
      allow list: if false;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Controls access to incident report documents.
      * @path /incidentReports/{reportId}
      * @allow (create) Signed-in user can create an incident report.
      * @deny (get, list, update, delete) No one can perform these actions.
      * @principle Restricts incident report management.
      */
    match /incidentReports/{reportId} {
        allow get: if false;
        allow list: if false;
        allow create: if request.auth != null;
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}