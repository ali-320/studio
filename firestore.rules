/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for the Flood Prevention application.
 *
 * Core Philosophy:
 *  This ruleset implements a hybrid security model, combining user-based access control with public read access for certain collections.
 *  User data and related subcollections are strictly controlled by ownership. Alerts are publicly readable.
 *  Volunteer applications are managed by admins. News feeds are globally accessible for reading and restricted for writing.
 *
 * Data Structure:
 *  - /users/{userId}: User profiles, accessible only to the owning user.
 *  - /users/{userId}/savedLocations/{locationId}: Saved locations, accessible only to the owning user.
 *  - /alerts/{alertId}: Flood alerts, publicly readable.
 *  - /volunteerApplications/{applicationId}: Volunteer applications, create operations open to all, managed by admins.
 *  - /incidentReports/{reportId}: Incident reports from volunteers, associated with alerts.
 *  - /volunteerChats/{chatId}: Chat messages for volunteers.
 *  - /news/{locationId}: Cached news articles for a given location.
 *
 * Key Security Decisions:
 *  - User listing is disallowed to protect privacy.
 *  - Alerts are publicly readable, but creation, updates, and deletions are restricted.
 *  - The news feed is globally readable but restricted to write operations to authorized sources.
 *
 * Denormalization for Authorization:
 *  - Alerts do not require denormalization as they are intended to be publicly readable.
 *  - Incident Reports include `alertId` and `volunteerId` to link them to alerts and volunteers.
 *
 * Structural Segregation:
 *  - User-specific data (profile, saved locations) is stored under the /users/{userId} path for strict ownership.
 *  - Publicly readable data (alerts, news) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) - If the user's UID matches the document ID (self-registration).
     * @allow (get, update, delete) - If the user is the owner of the profile.
     * @deny (list) - User listing is disallowed for privacy.
     * @deny (create) - If the user's UID does not match the document ID.
     * @deny (update, delete) - If the user is not the owner of the profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Prevent user listing for privacy
      allow list: if false;

      // Allow a user to create their own profile if the UID matches the document ID
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email is string;

      // Allow a user to read, update, and delete their own profile
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to a user's saved locations.
     * @path /users/{userId}/savedLocations/{locationId}
     * @allow (create, get, list, update, delete) - If the user is the owner.
     * @deny (create, get, list, update, delete) - If the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/savedLocations/{locationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants read access to all users for alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) - To any user.
     * @deny (create, update, delete) - Only administrators or backend functions can create/modify alerts.
     * @principle Allows public read access but restricts write access.
     */
    match /alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add validation for admin or backend function.
      allow update: if false; // TODO: Add validation for admin or backend function.
      allow delete: if false; // TODO: Add validation for admin or backend function.
    }

    /**
     * @description Grants access to volunteer applications.
     * @path /volunteerApplications/{applicationId}
     * @allow (create) - Any signed-in user can submit an application.
     * @deny (get, list, update, delete) - Only admins can manage applications.
     * @principle Allows open creation but restricts management to administrators.
     */
    match /volunteerApplications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get: if false; // TODO: Add validation for admin role.
      allow list: if false; // TODO: Add validation for admin role.
      allow update: if false; // TODO: Add validation for admin role.
      allow delete: if false; // TODO: Add validation for admin role.
    }

    /**
     * @description Grants access to incident reports.
     * @path /incidentReports/{reportId}
     * @allow (create) - Only volunteers can create incident reports.
     * @allow (get, list) - Only volunteers can read incident reports.
     * @allow (update, delete) - No one can update or delete incident reports.
     * @principle Restricts access to incident reports to volunteers only.
     */
    match /incidentReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn(); // TODO: Add volunteer role check and validation for correct alertId and volunteerId.
      allow get: if isSignedIn();  // TODO: Add volunteer role check.
      allow list: if isSignedIn(); // TODO: Add volunteer role check.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to volunteer chat messages.
     * @path /volunteerChats/{chatId}
     * @allow (create, get, list) - Only volunteers can create, read, and list chat messages.
     * @deny (update, delete) - No one can update or delete chat messages.
     * @principle Restricts access to chat messages to volunteers only.
     */
    match /volunteerChats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn(); // TODO: Add volunteer role check and validation for userId and userName.
      allow get: if isSignedIn(); // TODO: Add volunteer role check.
      allow list: if isSignedIn(); // TODO: Add volunteer role check.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants read access to the news feed for all users, but restricts write access.
     * @path /news/{locationId}
     * @allow (get, list) - To any user.
     * @deny (create, update, delete) - Only backend functions can write to the news feed.
     * @principle Allows public read access but restricts write access.
     */
    match /news/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add validation for backend function.
      allow update: if false; // TODO: Add validation for backend function.
      allow delete: if false; // TODO: Add validation for backend function.
    }
  }
}