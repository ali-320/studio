/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership constraints.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  Admins can read and write any user document.  Users can only read and write their own document.
 * - /users/{userId}/savedLocations/{locationId}: Stores saved locations for a user. Only the owner can manage their own locations.
 * - /alerts/{alertId}: Stores flood alerts. Public read access. Only admins can create, update, or delete alerts.
 * - /volunteerApplications/{applicationId}: Stores volunteer applications. Public read access.  Only admins can create, update, or delete applications.
 * - /incidentReports/{reportId}: Stores incident reports. Only admins can create, update, or delete reports.
 * - /volunteerChats/{chatId}: Stores volunteer chat messages. Public read access. Only authenticated users can create messages.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Alerts and Volunteer Applications are publicly readable to facilitate rapid information dissemination and volunteer recruitment.
 * - Admin users have privileged access to all user data and alerts.
 *
 * Denormalization for Authorization:
 * - No denormalization is needed as roles are stored on the user document, which simplifies access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the authenticated user is an existing owner.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get) Signed-in user can read their own profile: auth.uid == userId
     * @allow (create) Signed-in user can create their own profile: auth.uid == userId
     * @allow (update) Signed-in user can update their own profile: auth.uid == userId
     * @allow (delete) Signed-in user can delete their own profile: auth.uid == userId
     * @allow (get) Admin user can read any profile.
     * @allow (update) Admin user can update any profile.
     * @deny (create) Non-signed-in user attempts to create a profile.
     * @deny (update) Signed-in user attempts to update another user's profile: auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.email is string;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/savedLocations/{locationId} collection.
     * @path /users/{userId}/savedLocations/{locationId}
     * @allow (create) Signed-in user can create a saved location under their own user ID.
     * @allow (update) Signed-in user can update a saved location under their own user ID.
     * @allow (delete) Signed-in user can delete a saved location under their own user ID.
     * @deny (create) Signed-in user attempts to create a saved location under another user's ID.
     * @deny (update) Signed-in user attempts to update a saved location under another user's ID.
     * @deny (delete) Signed-in user attempts to delete a saved location under another user's ID.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/savedLocations/{locationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /alerts/{alertId} collection.
     * @path /alerts/{alertId}
     * @allow (get) Public access to read alerts.
     * @allow (create) Only admins can create alerts.
     * @allow (update) Only admins can update alerts.
     * @allow (delete) Only admins can delete alerts.
     * @principle Public read, owner-only writes, with admin override.
     */
    match /alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for the /volunteerApplications/{applicationId} collection.
     * @path /volunteerApplications/{applicationId}
     * @allow (get) Public access to read volunteer applications.
     * @allow (create) Only admins can create applications.
     * @allow (update) Only admins can update applications.
     * @allow (delete) Only admins can delete applications.
     * @principle Public read, owner-only writes, with admin override.
     */
    match /volunteerApplications/{applicationId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for the /incidentReports/{reportId} collection.
     * @path /incidentReports/{reportId}
     * @allow (get) Public access to read incident reports.
     * @allow (create) Only admins can create reports.
     * @allow (update) Only admins can update reports.
     * @allow (delete) Only admins can delete reports.
     * @principle Owner-only access to writes, with admin override.
     */
    match /incidentReports/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Rule for the /volunteerChats/{chatId} collection.
      * @path /volunteerChats/{chatId}
      * @allow (get) Public access to read chat messages.
      * @allow (create) Any signed-in user can create chat messages.
      * @deny (update) No updates allowed to chat messages.
      * @deny (delete) No deletes allowed to chat messages.
      * @principle Public read, signed-in user can create.
      */
    match /volunteerChats/{chatId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }
  }
}