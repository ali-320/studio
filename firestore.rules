rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profiles.
     * @path /users/{userId}
     * @allow (get, list, create, update, delete) User can only access their own profile.
     *   Example: User with UID 'user123' can read, update, and delete document 'user123'.
     * @deny (get, list, create, update, delete) User cannot access another user's profile.
     *   Example: User with UID 'user123' cannot read, update, or delete document 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages access to flood alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) Alerts are publicly readable.
     *   Example: Any user can read alert documents.
     * @deny (create, update, delete) Only authenticated admin users can modify alerts.
     *   Example: An unauthenticated user or a regular user cannot create, update, or delete alerts.
     * @principle Public read access with owner-only writes for admins.
     */
    match /alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return request.auth.token.admin == true;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages access to volunteer applications.
     * @path /volunteerApplications/{applicationId}
     * @allow (create) Authenticated users can create volunteer applications.
     *   Example: User with UID 'user123' can create a volunteer application.
     * @deny (get, list, update, delete) Listing and modification of applications are disallowed.
     *   Example: No user can list all volunteer applications or modify existing ones.
     * @principle Restricts access to a user's own data tree.
     */
    match /volunteerApplications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to incident reports.
     * @path /incidentReports/{reportId}
     * @allow (create) Authenticated volunteers can create incident reports.
     * @deny (get, list, update, delete) Listing, getting, updating and deleting of reports are disallowed.
     * @principle Requires authentication for creating reports.
     */
    match /incidentReports/{reportId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isVolunteer() {
          return request.auth.token.volunteer == true;
        }

        allow get: if false;
        allow list: if false;
        allow create: if isSignedIn() && isVolunteer();
        allow update: if false;
        allow delete: if false;
    }
  }
}