/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and saved locations.
 *  Alerts, volunteer applications, incident reports, volunteer chats and news data are publicly readable but only writable by authorized users.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/savedLocations/{locationId}: Saved locations for a user, owned by the user.
 * - /alerts/{alertId}: Flood alerts, publicly readable, writable by authorized users.
 * - /volunteerApplications/{applicationId}: Volunteer applications, publicly readable, writable by authorized users.
 * - /incidentReports/{reportId}: Incident reports, publicly readable, writable by authorized users.
 * - /volunteerChats/{chatId}: Volunteer chat messages, publicly readable, writable by authorized users.
 * - /news/{locationId}: Cached news articles, publicly readable, writable by authorized users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and saved locations.
 * - Listing of users is disallowed for privacy.
 * - Alerts, volunteer applications, incident reports, volunteer chats, and news data are publicly readable to facilitate data sharing.
 * - The rules do NOT enforce the schema of the data being written, other than requiring specific fields for authorization.
 *
 * Denormalization for Authorization:
 * - None needed in this initial version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete their profile at /users/user123.
     * @deny (create) User with UID 'user123' cannot create a profile at /users/user456.
     * @deny (get, update, delete) User with UID 'user123' cannot read/update/delete a profile at /users/user456.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing of all users for privacy.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects saved locations for a user. Only the user can read/write their own saved locations.
     * @path /users/{userId}/savedLocations/{locationId}
     * @allow (create) User with UID 'user123' can create a saved location at /users/user123/savedLocations/loc1.
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete their saved location at /users/user123/savedLocations/loc1.
     * @deny (create) User with UID 'user123' cannot create a saved location at /users/user456/savedLocations/loc1.
     * @deny (get, update, delete) User with UID 'user123' cannot read/update/delete a saved location at /users/user456/savedLocations/loc1.
     * @principle Enforces document ownership for saved locations.
     */
    match /users/{userId}/savedLocations/{locationId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public reading of alerts, but restricts writes.
     * @path /alerts/{alertId}
     * @allow (get, list) Anyone can read alerts.
     * @deny (create, update, delete) Only authorized users can modify alerts (TODO: implement authorization check).
     * @principle Public read, restricted write for alerts.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public reading of volunteer applications, but restricts writes.
     * @path /volunteerApplications/{applicationId}
     * @allow (get, list) Anyone can read volunteer applications.
     * @deny (create, update, delete) Only authorized users can modify volunteer applications (TODO: implement authorization check).
     * @principle Public read, restricted write for volunteer applications.
     */
    match /volunteerApplications/{applicationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public reading of incident reports, but restricts writes.
     * @path /incidentReports/{reportId}
     * @allow (get, list) Anyone can read incident reports.
     * @deny (create, update, delete) Only authorized users can modify incident reports (TODO: implement authorization check).
     * @principle Public read, restricted write for incident reports.
     */
    match /incidentReports/{reportId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public reading of volunteer chat messages, but restricts writes.
     * @path /volunteerChats/{chatId}
     * @allow (get, list) Anyone can read chat messages.
     * @deny (create, update, delete) Only authorized users can modify chat messages (TODO: implement authorization check).
     * @principle Public read, restricted write for volunteer chats.
     */
    match /volunteerChats/{chatId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

       /**
     * @description Allows public reading of news articles, but restricts writes.
     * @path /news/{locationId}
     * @allow (get, list) Anyone can read news articles.
     * @deny (create, update, delete) Only authorized users can modify news articles (TODO: implement authorization check).
     */
    match /news/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }
  }
}