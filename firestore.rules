/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with owner-only access for user data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user themselves or an admin can read/write.
 * - /users/{userId}/savedLocations/{locationId}: Stores user saved locations. Only the user themselves can read/write.
 * - /alerts/{alertId}: Stores flood alerts. Publicly readable, but writeable only by authorized users.
 * - /volunteerApplications/{applicationId}: Stores volunteer applications. Only admins can approve/reject applications.
 * - /incidentReports/{reportId}: Stores incident reports from volunteers.
 * - /volunteerChats/{chatId}: Stores chat messages for volunteers.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and saved locations.
 * - Alerts are publicly readable, but only authorized users (e.g., admins) can create, update, or delete them.
 * - Only admins can manage volunteer applications.
 * - Listing of users is disallowed to prevent unauthorized data scraping.
 *
 * Denormalization for Authorization:
 * - For simplicity, alert documents are assumed to have an `assignedVolunteer` field containing the UID of the assigned volunteer, allowing direct access control without additional lookups.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user themselves or an admin can read/write.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching {userId} can access. Admin can access.
     * @allow (create) User with matching {userId} can create their own profile.
     * @deny (get) User attempts to read another user's profile.
     * @deny (create) User attempts to create a profile with a mismatched {userId}.
     * @principle Enforces document ownership for writes, allows self-creation, restricts listing, and restricts updates to owner or admin.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
          return isSignedIn() && (request.auth.token.role == 'admin');
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Secure saved locations for a user. Only the user themselves can read/write.
     * @path /users/{userId}/savedLocations/{locationId}
     * @allow (get, list, create, update, delete) User with matching {userId} can access.
     * @deny (get) User attempts to read another user's saved locations.
     * @deny (create) User attempts to create a location with a mismatched {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/savedLocations/{locationId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource.data != null;
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure flood alerts. Publicly readable, but writeable only by authorized users (e.g., admins).
     * @path /alerts/{alertId}
     * @allow (get, list) Anyone can read alerts.
     * @allow (create, update, delete) Only admins can create, update, or delete alerts.
     * @principle Allows public reads, restricts writes to admins.
     */
    match /alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return isSignedIn() && (request.auth.token.role == 'admin');
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secure volunteer applications. Only admins can approve/reject applications.
     * @path /volunteerApplications/{applicationId}
     * @allow (get, list) Only admins can read or list applications.
     * @allow (create, update, delete) Only admins can create, update, or delete applications.
     * @principle Restricts all access to admins.
     */
    match /volunteerApplications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return isSignedIn() && (request.auth.token.role == 'admin');
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secure incident reports from volunteers.
     * @path /incidentReports/{reportId}
     */
    match /incidentReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isVolunteer() {
        return isSignedIn() && (request.auth.token.role == 'volunteer');
      }

      allow get: if isSignedIn() && isVolunteer();
      allow list: if isSignedIn() && isVolunteer();
      allow create: if isSignedIn() && isVolunteer();
      allow update: if isSignedIn() && isVolunteer();
      allow delete: if isSignedIn() && isVolunteer();
    }

     /**
      * @description Secure volunteer chat messages.
      * @path /volunteerChats/{chatId}
      */
    match /volunteerChats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isVolunteer() {
        return isSignedIn() && (request.auth.token.role == 'volunteer');
      }

      allow get: if isSignedIn() && isVolunteer();
      allow list: if isSignedIn() && isVolunteer();
      allow create: if isSignedIn() && isVolunteer();
      allow update: if isSignedIn() && isVolunteer();
      allow delete: if isSignedIn() && isVolunteer();
    }
  }
}