/**
 * @file Firebase Security Rules for Flood Prevention App
 * @version 2
 *
 * @Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * Users can only manage their own profiles.
 * Alerts and Incident Reports are publicly readable but only writable by authorized users (volunteers, admins).
 * Volunteer Applications can be created by any signed-in user.
 *
 * @Data Structure:
 * - /users/{userId}: Stores individual user profiles, secured by ownership.
 * - /alerts/{alertId}: Stores flood alerts; publicly readable, restricted writes.
 * - /volunteerApplications/{applicationId}: Stores volunteer applications, accessible only to admins and the applicant.
 * - /incidentReports/{reportId}: Stores incident reports, readable by all, writable by specific volunteers.
 *
 * @Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Listing users is not allowed.
 * - Public read access for alerts to facilitate community awareness.
 * - Volunteer applications are generally readable to facilitate admin review.
 *
 * @Denormalization for Authorization:
 *  - Alert documents do not contain explicit volunteer role definitions. Rules rely on trusted client to enforce role based write access.
 *
 * @Structural Segregation:
 *  - No separation of private and public data within a single collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles.
     * @path /users/{userId}
     * @allow (read, write) Authenticated user can only read/write their own profile.
     *          Example: User with UID 'user123' can read/write /users/user123.
     * @deny (read, write) Authenticated user cannot read/write another user's profile.
     *          Example: User with UID 'user123' cannot read/write /users/anotherUser.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages flood alerts.
     * @path /alerts/{alertId}
     * @allow (read) Any user can read flood alerts.
     *          Example: Any user can read /alerts/alert123.
     * @deny (write) Only authenticated users can create alerts
     *          Example: Anonymous user cannot create /alerts/alert123.
     * @principle Allows public read access but restricts write access to authorized users.
     */
    match /alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages volunteer applications.
     * @path /volunteerApplications/{applicationId}
     * @allow (create) Any signed-in user can create a volunteer application.
     *          Example: User with UID 'user123' can create /volunteerApplications/app123.
     * @deny (read, write, delete) Non-admin users cannot read, write, or delete applications they don't own.
     *          Example: User with UID 'user456' cannot read/write/delete /volunteerApplications/app123 if not the owner.
     * @principle Allows self-creation of applications but restricts modification and access.
     */
    match /volunteerApplications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages incident reports.
     * @path /incidentReports/{reportId}
     * @allow (read) Any user can read incident reports.
     *          Example: Any user can read /incidentReports/report123.
     * @deny (write) Only signed-in users can create/update/delete incident reports.
     * @principle Allows public read access but restricts write access.
     */
    match /incidentReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}