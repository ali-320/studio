/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and saved locations,
 *              while allowing public read access to alerts. Volunteer applications require no auth and
 *              incident reports are only accessible by their associated volunteers.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /users/{userId}/savedLocations/{locationId}: Stores saved locations for each user, accessible only by that user.
 * - /alerts/{alertId}: Stores flood alerts, publicly readable but writable only with proper authorization (TODO: Implement this).
 * - /volunteerApplications/{applicationId}: Stores volunteer applications, which can be created by anyone but only updated/deleted by admins.
 * - /incidentReports/{reportId}: Stores incident reports, only accessible by the volunteer who created them.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId} and its subcollections.
 * - Alerts are publicly readable, enabling broad access to critical safety information. Write permissions are currently open (TODO).
 * - Listing of saved locations is allowed only to the owner.
 * - Volunteer applications can be created by anyone.
 *
 * Denormalization for Authorization:
 * - No denormalization is needed in this version. The rules rely on the `request.auth.uid` and the path to control access.
 *
 * Structural Segregation:
 * - Private user data is stored under /users/{userId}, separate from the public /alerts collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with UID 'user123' can access /users/user123. (create, update) require request.auth.uid == userId
     * @deny (get) User with UID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to saved locations for a user. Only the authenticated user can read/write their own saved locations.
     * @path /users/{userId}/savedLocations/{locationId}
     * @allow (get, create, update, delete, list) User with UID 'user123' can access /users/user123/savedLocations/loc1.
     * @deny (get) User with UID 'user456' cannot access /users/user123/savedLocations/loc1.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/savedLocations/{locationId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to flood alerts.  Allows public read access (get, list), but restricts write access.
     * @path /alerts/{alertId}
     * @allow (get, list) Any user can read alert data.
     * @deny (create, update, delete) Non-admin users cannot modify alert data (TODO: Implement Admin Validation).
     * @principle Allows public read access while restricting write access to authorized users.
     */
    match /alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to volunteer applications.  Allows anyone to create, but restricts update/delete.
     * @path /volunteerApplications/{applicationId}
     * @allow (create) Any user can create a volunteer application.
     * @deny (update, delete) Non-admin users cannot modify volunteer applications (TODO: Implement Admin Validation).
     * @principle Allows public submissions, restricts modifications.
     */
    match /volunteerApplications/{applicationId} {
        allow get: if true;
        allow list: if false;
        allow create: if true;
        allow update: if false; // TODO: Implement Admin Validation
        allow delete: if false; // TODO: Implement Admin Validation
    }

    /**
     * @description Controls access to incident reports. Only the volunteer who created the report can access it.
     * @path /incidentReports/{reportId}
     * @allow (get, create, update, delete) A volunteer can only access their own incident reports, checking if the volunteerId matches their UID.
     * @deny (get) A volunteer cannot access an incident report created by another volunteer.
     * @principle Enforces ownership based on the volunteerId field.
     */
    match /incidentReports/{reportId} {
      function isOwner(volunteerId) {
        return request.auth.uid == volunteerId;
      }
      function isExistingOwner(volunteerId) {
        return isOwner(volunteerId) && resource != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if request.resource.data.volunteerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.volunteerId);
      allow delete: if isExistingOwner(resource.data.volunteerId);
    }
  }
}