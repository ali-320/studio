/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a user-ownership model for user profiles and allows public read access to flood alerts while restricting write access to authorized users. Volunteer applications can only be created by the associated user and are managed by admins. Incident reports can only be created by the assigned volunteer and only for alerts that have that volunteer assigned.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.  Access is restricted to the owning user (self) for reads and writes.
 * - /alerts/{alertId}: Stores flood alerts. Read access is public. Write access is restricted based on alert and user roles.
 * - /volunteerApplications/{applicationId}: Stores volunteer applications.  Create access is limited to the applying user.  Other operations are limited to admins.
 * - /incidentReports/{reportId}: Stores incident reports. Create access is limited to the volunteer assigned to the alert.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Alerts are publicly readable, but modification requires specific authorization logic.
 * - Volunteer applications are self-created but managed by admins.
 * - The default security posture is strict: all access must be explicitly allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get, list) User 'user_abc' can read their own profile.
     * @allow (create) User 'user_abc' can create their own profile.
     * @allow (update, delete) User 'user_abc' can update or delete their own profile.
     * @deny (get, list) User 'user_xyz' cannot read 'user_abc' profile.
     * @deny (create) User 'user_xyz' cannot create 'user_abc' profile.
     * @deny (update, delete) User 'user_xyz' cannot update or delete 'user_abc' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is an existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to flood alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) Any user can read alerts.
     * @allow (create) Only authenticated users can create alerts
     * @deny (create) Unauthenticated users cannot create alerts.
     * @principle Allows public read access but restricts writes.
     */
    match /alerts/{alertId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to volunteer applications.
     * @path /volunteerApplications/{applicationId}
     * @allow (create) A user can create their own volunteer application.
     * @deny (get, list, update, delete) Only admins can manage volunteer applications.
     * @principle Enforces self-creation for applications and admin control for management.
     */
    match /volunteerApplications/{applicationId} {
        function isSignedIn() {
          return request.auth != null;
        }

        // Helper function to check if the user is the owner of the document
        function isOwner(userId) {
          return isSignedIn() && request.auth.uid == userId;
        }

        allow get, list, update, delete: if false;
        allow create: if isSignedIn() && request.resource.data.get("userId") == request.auth.uid;
    }

        /**
     * @description Controls access to incident reports.
     * @path /incidentReports/{reportId}
     * @allow (create) A volunteer can create a report for an alert they are assigned to.
     * @deny (get, list, update, delete) Only the assigned volunteer can create reports.
     * @principle Restricts report creation to assigned volunteers.
     */
    match /incidentReports/{reportId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list, update, delete: if false;

        allow create: if isSignedIn() && get(/databases/$(database)/documents/alerts/$(request.resource.data.get("alertId"))).data.get("assignedVolunteer") == request.auth.uid;
    }
  }
}