/**
 * @fileoverview Firestore Security Rules for Flood Monitoring App
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-centric model for user data while allowing public read access to certain collections.
 * User data is strictly controlled by the individual user, and write access is carefully guarded.
 *
 * Data Structure:
 * - Users: Stored under `/users/{userId}`, accessible only by the authenticated user with matching UID.
 * - Saved Locations: Stored under `/users/{userId}/savedLocations/{locationId}`, accessible only by the authenticated user with matching UID.
 * - Alerts: Stored under `/alerts/{alertId}`, publicly readable, but write-protected.
 * - Volunteer Applications: Stored under `/volunteerApplications/{applicationId}`, write-protected.
 * - Incident Reports: Stored under `/incidentReports/{reportId}`, write-protected, owner-restricted.
 * - Volunteer Chats: Stored under `/volunteerChats/{chatId}`, publicly readable and writable.
 * - News: Stored under `/news/{locationId}`, publicly readable, but write-protected.
 *
 * Key Security Decisions:
 * - User data is private and only accessible by the owning user.
 * - Listing of users is explicitly denied to protect user privacy.
 * - Alerts, Volunteer Chats and News are publicly readable but write permissions are restricted
 * - Volunteer Applications and Incident Reports are not publicly readable and write permissions are restricted
 *
 * Denormalization for Authorization:
 * - News documents require no denormalization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the most basic security requirement, that the user must be signed in
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Determines if the current user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Determines if the current user is the existing owner of the resource (resource must exist).
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that when creating a document, the 'id' field matches the document ID to maintain data integrity.
     */
    function isValidOwnerIdOnCreate(userId) {
        return request.resource.data.id == userId;
    }

    /**
     * @description Enforces that the 'id' field cannot be changed after the document is created to maintain data integrity.
     */
    function isImmutableOwnerIdOnUpdate(userId) {
        return request.resource.data.id == resource.data.id;
    }

    /**
     * @description
     *  - Enforces document ownership for writes.
     *  - Requires the user to be authenticated to create, update, or delete.
     *  - On create, requires the 'id' field in the data to match the {userId} in the path.
     *  - On update, ensures the 'id' field (owner) remains immutable.
     * @path /users/{userId}
     * @allow (create) - User A with UID 'user_a' creates a document at /users/user_a with data { id: 'user_a', ... }.
     * @allow (update) - User A with UID 'user_a' updates a document at /users/user_a, modifying other fields but leaving 'id' as 'user_a'.
     * @allow (delete) - User A with UID 'user_a' deletes the document at /users/user_a.
     * @deny (create) - User B with UID 'user_b' attempts to create a document at /users/user_a.
     * @deny (create) - User A with UID 'user_a' attempts to create a document at /users/user_a with data { id: 'user_b', ... }.
     * @deny (update) - User A with UID 'user_a' attempts to update a document at /users/user_a, changing 'id' from 'user_a' to 'user_b'.
     * @deny (delete) - User B with UID 'user_b' attempts to delete the document at /users/user_a.
     * @principle Enforces document ownership for writes, validates relational integrity.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Explicitly prevent listing of users.
      allow create: if isSignedIn() && isOwner(userId) && isValidOwnerIdOnCreate(userId);
      allow update: if isExistingOwner(userId) && isImmutableOwnerIdOnUpdate(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to saved locations, ensuring only the owner can manage them.
     * @path /users/{userId}/savedLocations/{locationId}
     * @allow (create) - User A with UID 'user_a' creates a saved location under /users/user_a/savedLocations/location_1.
     * @allow (update) - User A with UID 'user_a' updates a saved location under /users/user_a/savedLocations/location_1.
     * @allow (delete) - User A with UID 'user_a' deletes a saved location under /users/user_a/savedLocations/location_1.
     * @allow (get) - User A with UID 'user_a' reads a saved location under /users/user_a/savedLocations/location_1.
     * @deny (create) - User B with UID 'user_b' attempts to create a saved location under /users/user_a/savedLocations/location_1.
     * @deny (update) - User B with UID 'user_b' attempts to update a saved location under /users/user_a/savedLocations/location_1.
     * @deny (delete) - User B with UID 'user_b' attempts to delete a saved location under /users/user_a/savedLocations/location_1.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/savedLocations/{locationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to alerts, but restricts write access.
     * @path /alerts/{alertId}
     * @allow (get) - Any user (signed in or not) can read an alert.
     * @allow (list) - Any user (signed in or not) can list alerts.
     * @deny (create) - Any user attempts to create a new alert.
     * @deny (update) - Any user attempts to update an existing alert.
     * @deny (delete) - Any user attempts to delete an alert.
     * @principle Public read with owner-only writes (write access is disabled in this case).
     */
    match /alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to volunteer applications.
     * @path /volunteerApplications/{applicationId}
     * @deny (get) - Any user attempts to get a volunteer application.
     * @deny (list) - Any user attempts to list volunteer applications.
     * @deny (create) - Any user attempts to create a volunteer application.
     * @deny (update) - Any user attempts to update a volunteer application.
     * @deny (delete) - Any user attempts to delete a volunteer application.
     */
    match /volunteerApplications/{applicationId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to incident reports.
     * @path /incidentReports/{reportId}
     * @deny (get) - Any user attempts to get an incident report.
     * @deny (list) - Any user attempts to list incident reports.
     * @deny (create) - Any user attempts to create an incident report.
     * @deny (update) - Any user attempts to update an incident report.
     * @deny (delete) - Any user attempts to delete an incident report.
     */
    match /incidentReports/{reportId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read and write access to volunteer chats.
     * @path /volunteerChats/{chatId}
     * @allow (get) - Any user (signed in or not) can read a chat message.
     * @allow (list) - Any user (signed in or not) can list chat messages.
     * @allow (create) - Any user can create a new chat message.
     * @deny (update) - Any user attempts to update an existing chat message.
     * @deny (delete) - Any user attempts to delete a chat message.
     * @principle Public read and write for a chat feature.
     */
    match /volunteerChats/{chatId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to news articles, but restricts write access.
     * @path /news/{locationId}
     * @allow (get) - Any user (signed in or not) can read a news article.
     * @allow (list) - Any user (signed in or not) can list news articles.
     * @deny (create) - Any user attempts to create a new news article.
     * @deny (update) - Any user attempts to update an existing news article.
     * @deny (delete) - Any user attempts to delete a news article.
     * @principle Public read with owner-only writes (write access is disabled in this case).
     */
    match /news/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}