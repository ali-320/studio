rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create, update, delete, get) User with UID 'AFY67inoDOR7wpAqyuLKvapXuf73' can modify their own profile at /users/AFY67inoDOR7wpAqyuLKvapXuf73.
     * @deny (create, update, delete, get) User with UID 'otherUser' cannot modify the profile at /users/AFY67inoDOR7wpAqyuLKvapXuf73.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Verifies that the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Verifies that the request is made by the owner of the user document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Verifies that the request is made by the owner of the user document, and that the document exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages flood alerts, allowing public read access and restricted write access.
     * @path /alerts/{alertId}
     * @allow (get, list) Any user can read alerts.
     * @allow (create) Authenticated user can create an alert.
     * @deny (create, update, delete) Unauthorized user cannot modify alerts.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /alerts/{alertId} {
      // Verifies that the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages volunteer applications, restricting access to authorized users.
     * @path /volunteerApplications/{applicationId}
     * @deny (create, update, delete, get, list) No one can create, update, delete, get or list volunteer applications
     * @principle Enforces that only admins or privileged users can access volunteer applications.
     */
    match /volunteerApplications/{applicationId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Manages incident reports, restricting access to authorized users.
      * @path /incidentReports/{reportId}
      * @deny (create, update, delete, get, list) No one can create, update, delete, get or list incident reports.
      * @principle Enforces that only admins or privileged users can access incident reports.
      */
    match /incidentReports/{reportId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}