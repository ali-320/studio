rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile.
     *          request.auth.uid == 'user123' and request.resource.data.id == 'user123'
     * @allow (get, list, update, delete) - User with UID 'user123' can read/write their own profile.
     *          request.auth.uid == 'user123' and resource.data.id == 'user123'
     * @deny (create) - User with UID 'user123' cannot create a profile for 'user456'.
     *       request.auth.uid == 'user123' and request.resource.data.id == 'user456'
     * @deny (get, list, update, delete) - User with UID 'user123' cannot read/write profile for 'user456'.
     *       request.auth.uid == 'user123' and resource.data.id == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to flood alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) - Any user can read alerts.
     * @deny (create, update, delete) - Only authorized users (e.g., admins) can modify alerts. // TODO: Define which role
     * @principle Allows public read access but restricts write access.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation to allow create, update, delete
    }

    /**
     * @description Controls access to volunteer applications.
     * @path /volunteerApplications/{applicationId}
     * @allow (create) - User with UID 'user123' can create their own application where userId == 'user123'.
     *         request.auth.uid == 'user123' && request.resource.data.userId == 'user123'
     * @deny (get, list, update, delete) - Only admins can access or modify applications. // TODO: Define Admin Role
     * @principle Restricts creation to the applicant and requires admin role for management.
     */
    match /volunteerApplications/{applicationId} {
      function isApplicant(applicationId) {
        return request.auth.uid == request.resource.data.userId;
      }

      allow get, list: if false; // TODO: Implement admin role check here.
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update, delete: if false; // TODO: Implement admin role check here.
    }

    /**
     * @description Controls access to incident reports.
     * @path /incidentReports/{reportId}
     * @deny (get, list, create, update, delete) - Only authorized volunteers can create reports related to the alert. // TODO: Define which role is authorised
     * @principle Restricts access to authorized volunteers.
     */
    match /incidentReports/{reportId} {
      allow get, list, create, update, delete: if false; // TODO: Add volunteer role validation and alert association to allow access
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}